plugins {
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.17'
}

tasks.wrapper {
    gradleVersion = '7.5.1'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'com.sun.swingset3'
description = 'SwingSet3 sample application'
version = '1.0-SNAPSHOT'

ext {
    mainClassName = 'com.github.chirontt.graalvm.swingset3.NativeSwingSet3'
    splashImage = 'com/sun/swingset3/resources/images/splash.png'
    currentPlatform = getCurrentPlatform()
    nativeImageDirName = "native-image-$currentPlatform"
}

//detect the OS (assuming 64-bit, on Intel/AMD hardware)
private static String getCurrentPlatform() {
    def currentOS = org.gradle.internal.os.OperatingSystem.current()
    return currentOS.isLinux() ? 'linux' :
           currentOS.isMacOsX() ? 'macos' :
           currentOS.isWindows() ? 'windows' :
           'unknown'
}

repositories {
    mavenCentral()
    mavenLocal()
}

compileJava {
    options.release = 11  //use JDK11+ for compiling & running
    options.encoding = 'UTF-8'
}

dependencies {
    implementation 'org.jdesktop:appframework:1.0.3'
    implementation 'org.swinglabs.swingx:swingx-all:1.6.3'
    implementation 'net.java.dev.timingframework:timingframework:1.0'
    compileOnly files('lib/jnlp.jar')
}

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
        resources {
            //include current platform's GraalVM native-image configuration files
            srcDirs = ["src", "graal-cfg/$currentPlatform"]
        }
    }
}

jar {
    //include all SwingSet3 source code
    archiveClassifier = 'with-sources'
    from sourceSets.main.allJava

    manifest {
        attributes(
            'Main-Class': project.mainClassName,
            'Built-By': System.getProperty('user.name'),
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
            'SplashScreen-Image': project.splashImage,
        )
    }
}

//create a stand-alone executable uber jar with splash screen
//including all dependencies and all SwingSet3 source code
task uberJar(type: Jar) {
    with jar
    archiveClassifier = 'no-deps-with-sources'
    manifest.from jar.manifest
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy 'exclude'
}

application {
    mainClass = project.mainClassName
    applicationName = project.name
}

run {
    //run from the compiled jar, so that Java source code are included in the classpath
    classpath = files(jar.archiveFile) + configurations.runtimeClasspath

    //get system properties specified from the command line (for debugging, etc.)
    //and pass them on to the running application's JVM
    systemProperties = System.getProperties()

    jvmArgs = [
        //use the following Java agent for as many different run scenarios as possible,
        //and for all the code-execution paths as much as possible,
        //to generate (or merge with) the GraalVM native-image configuration files
        //in the graal-cfg/$currentPlatform/META-INF/native-image directory.
        //This directory is read by GraalVM during the native-image build.
        //"-agentlib:native-image-agent=config-merge-dir=graal-cfg/$currentPlatform/META-INF/native-image",
        "-splash:src/${project.splashImage}",
    ]
}

//copy the font config files from the JDK
task copyFontConfigFiles(type: Copy) {
    def jdkHome = System.getProperty('java.home')
    from ("$jdkHome/lib") {
        include 'fontconfig.bfc', 'fontconfig.properties.src'
    }
    into "$buildDir/$nativeImageDirName/lib"
}

//mark the native executable as Windows GUI program
task markWindowsGui(type: Exec) {
    commandLine 'editbin.exe', '/subsystem:windows', file("$buildDir/$nativeImageDirName/${project.name}.exe").path
}

//remove unneeded .dll/.txt/.pdb files
task removeUnneededDllFiles {
    doLast {
        if (file("$buildDir/$nativeImageDirName").exists()) {
            ant.move(todir: "$buildDir/tmp/$nativeImageDirName") {
                fileset(dir: "$buildDir/$nativeImageDirName") {
                    include name: '*.dll'
                    include name: '*.pdb'
                    include name: '*.txt'
                    //keep the shim DLLs and some
                    exclude name: 'awt.dll'
                    exclude name: 'fontmanager.dll'
                    exclude name: 'java.dll'
                    exclude name: 'jvm.dll'
                }
            }
        }
        if (file("$buildDir/$nativeImageDirName/reports").exists()) {
            ant.move(file: "$buildDir/$nativeImageDirName/reports",
                     tofile: "$buildDir/tmp/$nativeImageDirName/reports")
        }
        if (file("$buildDir/$nativeImageDirName/sources").exists()) {
            ant.move(file: "$buildDir/$nativeImageDirName/sources",
                     tofile: "$buildDir/tmp/$nativeImageDirName/sources")
        }
    }
}

javadoc {
    options.encoding = 'UTF-8'
    //turn off doclint errors/warnings output (but some warnings are still in the output)
    options.addStringOption('Xdoclint:none', '-quiet')
    //force the generation of frames!
    options.addBooleanOption('-frames', true)
    //don't fail the task if javadoc errors exist
    failOnError = false
}

graalvmNative {
    binaries {
        main {
            imageName = project.name
            mainClass = project.mainClassName
            debug = true
            verbose = true
            fallback = false

            if (currentPlatform == 'linux') {
                jvmArgs.add('-Djava.awt.headless=false')
            }

            buildArgs.add('--enable-url-protocols=http,https')
            buildArgs.add('--report-unsupported-elements-at-runtime')
            buildArgs.add('--native-image-info')
            buildArgs.add("-H:Path=$buildDir/$nativeImageDirName")
            buildArgs.add("-H:TempDirectory=$buildDir/tmp/$nativeImageDirName")
            buildArgs.add('-H:+TraceNativeToolUsage')

            useFatJar = false
        }
    }
}

tasks.named("nativeCompile") {
    //use the uber jar if long classpath becomes a problem in Windows:
    //dependsOn uberJar
    //classpathJar = uberJar.archiveFile
    if (currentPlatform == 'windows') {
        finalizedBy copyFontConfigFiles, markWindowsGui
    }
    finalizedBy removeUnneededDllFiles
}

