plugins {
    id 'application'
    id 'org.mikeneck.graalvm-native-image' version '1.4.1'
}

wrapper {
    gradleVersion = '7.1.1'
    distributionType = Wrapper.DistributionType.ALL
}

group = 'com.sun.swingset3'
description = 'SwingSet3 sample application'
version = '0.0.1-SNAPSHOT'

ext {
    mainClassName = 'com.github.chirontt.graalvm.swingset3.NativeSwingSet3'
    splashImage = 'com/sun/swingset3/resources/images/splash.png'
    currentPlatform = getCurrentPlatform()
    nativeImageDirName = "native-image-$currentPlatform"
}

//detect the OS (assuming 64-bit, on Intel/AMD hardware)
private static String getCurrentPlatform() {
    def currentOS = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem;
    if (currentOS.isWindows()) {
        return 'windows'
    } else if (currentOS.isLinux()) {
        return 'linux'
    } else if (currentOS.isMacOsX()) {
        return 'macos'
    }
    return 'unknown'
}

repositories {
    mavenCentral()
    mavenLocal()
}

compileJava {
    options.release = 11  //use JDK11+ for compiling & running
    options.encoding = 'UTF-8'
}

dependencies {
    implementation 'org.jdesktop:appframework:1.0.3'
    implementation 'org.swinglabs.swingx:swingx-all:1.6.3'
    implementation 'net.java.dev.timingframework:timingframework:1.0'
    compileOnly files('lib/jnlp.jar')
}

sourceSets {
    main {
        java {
            srcDirs = ["src"]
        }
        resources {
            //include current platform's GraalVM native-image configuration files
            srcDirs = ["src", "graal-cfg/$currentPlatform"]
        }
    }
}

jar {
    //include all SwingSet3 source code
    archiveClassifier = 'with-sources'
    from sourceSets.main.allJava

    manifest {
        attributes(
            'Main-Class': project.mainClassName,
            'Built-By': System.getProperty('user.name'),
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
            'SplashScreen-Image': project.splashImage,
        )
    }
}

//create a stand-alone executable uber jar with splash screen
//including all dependencies and all SwingSet3 source code
task uberJar(type: Jar) {
    with jar
    archiveClassifier = 'no-deps-with-sources'
    manifest {
        attributes(
            'Main-Class': project.mainClassName,
            'Built-By': System.getProperty('user.name'),
            'Created-By': System.getProperty('java.runtime.version') + ' (' + System.getProperty('java.vendor') + ')',
            'Gradle-Version': 'Gradle ' + gradle.getGradleVersion(),
            'SplashScreen-Image': project.splashImage,
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy 'exclude'
}

application {
    mainClass = project.mainClassName
    applicationName = project.name
}

run {
    //run from the compiled jar, so that Java source code are included in the classpath
    classpath = files(jar.archiveFile) + configurations.runtimeClasspath

    //get system properties specified from the command line (for debugging, etc.)
    //and pass them on to the running application's JVM
    systemProperties = System.getProperties()

    jvmArgs = [
        //use the following Java agent for as many different run scenarios as possible,
        //and for all the code-execution paths as much as possible,
        //to generate (or merge with) the GraalVM native-image configuration files
        //in the graal-cfg/$currentPlatform/META-INF/native-image directory.
        //This directory is read by GraalVM during the native-image build.
        //"-agentlib:native-image-agent=config-merge-dir=graal-cfg/$currentPlatform/META-INF/native-image",
        "-splash:src/${project.splashImage}",
    ]
}

//copy the font config files from the JDK
task copyFontConfigFiles(type: Copy) {
    def jdkHome = System.getProperty('java.home')
    from ("$jdkHome/lib") {
        include 'fontconfig.bfc', 'fontconfig.properties.src'
    }
    into "$buildDir/$nativeImageDirName/lib"
}

//mark the native executable as Windows GUI program
task markWindowsGui(type: Exec) {
    //path to the installation of Microsoft Visual Studio 2019 Community Edition, 64-bit
    def msvcPath = 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.28.29333\\bin\\HostX64\\x64'
    commandLine "$msvcPath\\editbin.exe", '/subsystem:windows', file("$buildDir/$nativeImageDirName/${project.name}.exe").path
}

nativeImage {
    graalVmHome = System.getProperty('java.home')
    buildType { org.mikeneck.graalvm.BuildTypeSelector build ->
        build.executable {
            main = project.mainClassName
        }
    }
    executableName = project.name
    outputDirectory = file("$buildDir/$nativeImageDirName")

    arguments {
        if (currentPlatform == 'linux') {
            add '-Djava.awt.headless=false'
        }
        add '--no-fallback'
        add '--enable-url-protocols=http,https'
        add '--report-unsupported-elements-at-runtime'
        add '--allow-incomplete-classpath'
        add '--native-image-info'
        add '-H:+TraceNativeToolUsage'
        add "-H:TempDirectory=$buildDir/tmp/$nativeImageDirName"
    }

    if (currentPlatform == 'windows') {
        finalizedBy copyFontConfigFiles, markWindowsGui
    }
}

generateNativeImageConfig {
    enabled = false
}

javadoc {
    options.encoding = 'UTF-8'
    //turn off doclint errors/warnings output (but some warnings are still in the output)
    options.addStringOption('Xdoclint:none', '-quiet')
    //force the generation of frames!
    options.addBooleanOption('-frames', true)
    //don't fail the task if javadoc errors exist
    failOnError = false
}

